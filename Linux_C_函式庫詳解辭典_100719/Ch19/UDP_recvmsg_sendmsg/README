server.c:

1. int socket(int domain, int type, int protocol);
2. void herror(const char *s);
3. int bind(int sockfd, struct sockaddr *my_addr, socklen_t addrlen);
4. int recvmsg(int s, struct msghdr *msg, unsigned int flags);
	a). int s: 指自己Local端的Socket FD;
	b). struct msghdr *msg: 
	c). unsigned int flags: 一般都是用預設值0; 但還有其它用法: MSG_OOB | MSG_PEEK | MEG_WAITALL | MSG_NOSIGNAL

5. int sendto(int s, struct msghdr *msg, unsigned int flags);
	a). int s: Local端已建立好的Socket FD; 
	b). struct msghdr *msg: 
	c). unsigned int flags: 一般都是用預設值0; 但還有其它用法: MSG_OOB | MSG_PEEK | MEG_WAITALL | MSG_NOSIGNAL
	
6. recvmsg()和sendmsg()函式回傳值為成功送出的字元數；失敗則是-1. 
7. 
struct msghdr定義在：/ usr / include / bits / socket.h
struct msghdr {
	void *msg_name;			// Address to send to/receive from. 
	socklen_t msg_namelen;	// Length of address data. 
	struct iovec *msg_iov;		// Vector of data to send/receive into. 
	size_t msg_iovlen;			// Number of elements in the vector. 
	void *msg_control;			// Ancillary data (eg BSD filedesc passing).
	size_t msg_controllen;		// Ancillary data buffer length. !! The type should be socklen_t but the definition of the kernel is incompatible with this. 
	int msg_flags;				// Flags on received message. 
};

struct iovec定義在：/ usr / include / bits / uio.h
// Structure for scatter/gather I/O. 
struct iovec {
	void *iov_base;	// Pointer to data. 
	size_t iov_len;		// Length of data. 
};

client.c:
1. int socket(int domain, int type, int protocol);
2. void herror(const char *s);

a). 這是一支很簡單的UDP/IP範例程式，Server端只需要socket()和bind()函式建立連線；而Client端只用socket()即可。
b). Server端的recvfrom()函式並不像TCP/IP的accept()函式，執行之後會在那邊Stand By Client端連進來，所以必須用一個while loop讓它一直跑
	，如果一直沒收到資料 (即回傳值為-1)就讓它continue; 同理，sendto()函式也一樣。
c). UDP的程序必須用recvfrom() / sendto()函式來做傳送及接收的動作。
